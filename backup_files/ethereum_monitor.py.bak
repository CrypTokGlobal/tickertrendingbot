import os
import json
import logging
import threading
import time
import asyncio
from web3 import Web3
from dotenv import load_dotenv

# Load environment variables
load_dotenv()

# Set up logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

class EthereumMonitor:
    _instance = None

    def __init__(self, bot=None):
        self.bot = bot
        self.web3 = None
        self.tracked_contracts = set()
        self.is_connected = False
        self.initialize_web3()

    @classmethod
    def get_instance(cls, bot=None):
        if cls._instance is None:
            cls._instance = cls(bot)
        elif bot is not None:
            cls._instance.bot = bot
        return cls._instance

    def initialize_web3(self):
        """Initialize Web3 connection with multiple fallbacks"""
        # Try Infura first
        infura_url = os.getenv('INFURA_URL')
        if infura_url:
            try:
                self.web3 = Web3(Web3.HTTPProvider(infura_url))
                if self.web3.is_connected():
                    logger.info(f"✅ Connected to Ethereum via Infura: {infura_url[:30]}...")
                    self.is_connected = True
                    return
                else:
                    logger.warning("⚠️ Infura URL didn't connect successfully")
            except Exception as e:
                logger.error(f"⚠️ Error connecting to Infura: {e}")

        # Try fallback RPC
        fallback_rpc = os.getenv('FALLBACK_RPC', 'https://rpc.ankr.com/eth')
        try:
            self.web3 = Web3(Web3.HTTPProvider(fallback_rpc))
            if self.web3.is_connected():
                logger.info(f"✅ Connected to Ethereum via fallback RPC: {fallback_rpc}")
                self.is_connected = True
                return
        except Exception as e:
            logger.error(f"⚠️ Error connecting to fallback RPC: {e}")

        # Last resort - try a public node
        try:
            public_node = "https://ethereum.publicnode.com"
            self.web3 = Web3(Web3.HTTPProvider(public_node))
            if self.web3.is_connected():
                logger.info(f"✅ Connected to Ethereum via public node: {public_node}")
                self.is_connected = True
                return
        except Exception as e:
            logger.error(f"⚠️ Error connecting to public node: {e}")

        logger.error("❌ Failed to connect to any Ethereum provider")
        self.is_connected = False

    def get_connection_status(self):
        """Return the connection status and details"""
        if not self.web3:
            return "No Web3 connection initialized"

        try:
            if self.web3.is_connected():
                block = self.web3.eth.block_number
                return f"Connected to Ethereum (Block #{block})"
            else:
                return "Web3 instance exists but is not connected"
        except Exception as e:
            return f"Error checking connection: {e}"

    def track_contract(self, address, chat_id=None):
        """Track a new Ethereum contract"""
        normalized_address = address.lower()
        self.tracked_contracts.add(normalized_address)
        logger.info(f"✅ Now tracking Ethereum contract: {normalized_address}")
        return True

    def untrack_contract(self, address):
        """Stop tracking an Ethereum contract"""
        normalized_address = address.lower()
        if normalized_address in self.tracked_contracts:
            self.tracked_contracts.remove(normalized_address)
            logger.info(f"🛑 Stopped tracking Ethereum contract: {normalized_address}")
            return True
        return False

    async def start_monitoring(self):
        """Start the Ethereum monitoring process"""
        if not self.is_connected:
            self.initialize_web3()
            if not self.is_connected:
                logger.error("❌ Cannot start monitoring: No Ethereum connection")
                return False

        logger.info(f"🚀 Starting Ethereum monitoring for {len(self.tracked_contracts)} contracts")
        return True

    def get_eth_balance(self, address=None):
        """Get the ETH balance for an address."""
        address = address or os.getenv("WALLET_ADDRESS")
        if not address:
            logger.error("No wallet address provided")
            return None

        balance_wei = self.web3.eth.get_balance(address)
        balance_eth = self.web3.from_wei(balance_wei, 'ether')
        return balance_eth

    def get_token_balance(self, token_address, address=None, get_decimals=True):
        """Get the token balance for a specific ERC20 token in human-readable format."""
        address = address or os.getenv("WALLET_ADDRESS")
        if not address or not token_address:
            logger.error("Missing wallet address or token address")
            return None

        # ERC20 ABI for balanceOf and decimals functions
        abi = [
            {
                "constant": True,
                "inputs": [{"name": "_owner", "type": "address"}],
                "name": "balanceOf",
                "outputs": [{"name": "balance", "type": "uint256"}],
                "type": "function"
            },
            {
                "constant": True,
                "inputs": [],
                "name": "decimals",
                "outputs": [{"name": "", "type": "uint8"}],
                "type": "function"
            }
        ]

        try:
            contract = self.web3.eth.contract(address=token_address, abi=abi)
            raw_balance = contract.functions.balanceOf(address).call()

            # Get token decimals if requested
            decimals = 18  # Default to 18 if not available
            if get_decimals:
                try:
                    decimals = contract.functions.decimals().call()
                except Exception as e:
                    logger.warning(f"Could not get decimals for {token_address}, using default 18: {e}")

            # Return human-readable balance
            return raw_balance / (10 ** decimals)
        except Exception as e:
            logger.error(f"Error getting token balance: {e}")
            return None

    def get_etherscan_tx_link(self, tx_hash):
        """Format a transaction hash into an Etherscan link.

        Args:
            tx_hash: The transaction hash (can be HexBytes or string)

        Returns:
            A properly formatted Etherscan URL
        """
        # Convert HexBytes to hex string if needed
        if hasattr(tx_hash, 'hex'):
            tx_hash = tx_hash.hex()

        # Ensure the hash doesn't have '0x' prefix for the URL
        if tx_hash.startswith('0x'):
            tx_hash = tx_hash[2:]

        return f"https://etherscan.io/tx/0x{tx_hash}"

    def monitor_gas_prices(self):
        """Monitor current gas prices."""
        gas_price = self.web3.eth.gas_price
        gas_price_gwei = self.web3.from_wei(gas_price, 'gwei')
        logger.info(f"Current gas price: {gas_price_gwei} Gwei")
        return gas_price_gwei

    def send_example_transaction(self):
        """Example of sending a transaction and getting a proper Etherscan link."""
        try:
            # Example of how to build and sign a transaction
            private_key = os.getenv("PRIVATE_KEY")
            wallet_address = os.getenv("WALLET_ADDRESS")
            if not private_key or not wallet_address:
                logger.error("No private key or wallet address set")
                return None

            nonce = self.web3.eth.get_transaction_count(wallet_address)

            # Example transaction parameters - this would be a simple ETH transfer
            tx_params = {
                'nonce': nonce,
                'gasPrice': self.web3.eth.gas_price,
                'gas': 21000,
                'to': wallet_address,  # Sending to self as example
                'value': self.web3.to_wei(0.001, 'ether'),  # Small amount
                'data': b'',
            }

            # Sign the transaction
            signed_txn = self.web3.eth.account.sign_transaction(tx_params, private_key)

            # Send the transaction
            tx_hash = self.web3.eth.send_raw_transaction(signed_txn.rawTransaction)

            # Generate Etherscan link (proper format)
            etherscan_link = self.get_etherscan_tx_link(tx_hash)
            logger.info(f"Transaction sent! View on Etherscan: {etherscan_link}")

            return etherscan_link
        except Exception as e:
            logger.error(f"Error sending transaction: {e}")
            return None

    async def send_buy_alert(self, bot, chat_id, name, symbol, amount, eth_used, price_impact=None, tx_hash=None):
        """Send a formatted buy alert to a Telegram chat."""
        try:
            # Determine impact emoji based on price impact
            impact_emoji = "🟢 Low"  # Default
            if price_impact:
                if price_impact > 10:
                    impact_emoji = "🔴 High"
                elif price_impact > 5:
                    impact_emoji = "🟠 Medium"

            # Format the message with Markdown
            message = f"""
            🚨 *[ BUY ALERT ]* 🚨

            🪙 *Token:* {name} (${symbol})  
            💰 *Amount:* {amount:.4f} {symbol}  
            🧾 *ETH Used:* {eth_used:.4f} ETH  
            📊 *Price Impact:* {impact_emoji}

            🔗 [View Transaction](https://etherscan.io/tx/{tx_hash})

            ━━━━━━━━━━━━━━━  
            🤖 Powered by [TickerTrending.com](https://tickertrending.com)
            """

            # Send the message with Markdown parsing
            await bot.send_message(
                chat_id=chat_id,
                text=message,
                parse_mode='Markdown',
                disable_web_page_preview=True
            )

            logger.info(f"Buy alert sent to chat {chat_id} for {symbol}")
            return True

        except Exception as e:
            logger.error(f"Error sending buy alert: {e}")
            return False

# Global instance for easy access
ethereum_monitor = None

def get_monitor(bot=None):
    """Get or create the Ethereum monitor instance"""
    global ethereum_monitor
    if ethereum_monitor is None:
        ethereum_monitor = EthereumMonitor(bot)
    elif bot is not None:
        ethereum_monitor.bot = bot
    return ethereum_monitor

async def test_ethereum_connection():
    """Test Ethereum connection and report status"""
    monitor = get_monitor()
    status = monitor.get_connection_status()
    logger.info(f"Ethereum connection test: {status}")
    return status


# Example usage
if __name__ == "__main__":
    monitor = get_monitor()
    gas_price = monitor.monitor_gas_prices()
    print(f"Current gas price: {gas_price} Gwei")

    if monitor.web3 and monitor.web3.is_connected(): #check connection before accessing web3
        balance = monitor.get_eth_balance()
        print(f"ETH Balance: {balance}")
        asyncio.run(test_ethereum_connection())